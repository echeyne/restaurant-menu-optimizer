name: Deploy Restaurant Menu Optimizer

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "20"
  #         cache: "npm"

  #     - name: Install dependencies
  #       run: npm install

  #     - name: Run tests
  #       run: npm test

  deploy:
    name: Deploy
    # needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - branch: main
            stage: dev
          - branch: develop
            stage: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to AWS
        if: github.ref == format('refs/heads/{0}', matrix.branch)
        # if: false
        run: |
          # Check if stack exists to determine if this is first deploy
          if aws cloudformation describe-stacks --stack-name restaurant-menu-optimizer-${{ matrix.stage }} --region us-east-1 2>/dev/null; then
            echo "Stack exists, resolving CloudFormation outputs..."
            
            # Get the actual values from CloudFormation outputs
            USER_POOL_ID=$(aws cloudformation describe-stacks \
              --stack-name restaurant-menu-optimizer-${{ matrix.stage }} \
              --region us-east-1 \
              --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' \
              --output text)
            
            CLIENT_ID=$(aws cloudformation describe-stacks \
              --stack-name restaurant-menu-optimizer-${{ matrix.stage }} \
              --region us-east-1 \
              --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' \
              --output text)
            
            BUCKET_NAME=$(aws cloudformation describe-stacks \
              --stack-name restaurant-menu-optimizer-${{ matrix.stage }} \
              --region us-east-1 \
              --query 'Stacks[0].Outputs[?OutputKey==`MenuFilesBucketName`].OutputValue' \
              --output text)
            
            echo "Deploying with resolved values..."
            echo "UserPoolId: $USER_POOL_ID"
            echo "ClientId: $CLIENT_ID"
            echo "MenuFilesBucket: $BUCKET_NAME"
            
            serverless deploy --stage ${{ matrix.stage }} \
              --param="userPoolId=$USER_POOL_ID" \
              --param="clientId=$CLIENT_ID" \
              --param="menuFilesBucket=$BUCKET_NAME" \
              --verbose
          else
            echo "First deploy, using default values..."
            serverless deploy --stage ${{ matrix.stage }} --verbose
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-frontend:
    name: Deploy Frontend
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.32.7"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get
        working-directory: ./frontend

      - name: Build web
        run: flutter build web
        working-directory: ./frontend

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3
        run: |
          # Get the frontend bucket name from CloudFormation outputs
          FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name restaurant-menu-optimizer-dev \
            --region us-east-1 \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendBucketName`].OutputValue' \
            --output text)

          if [ -z "$FRONTEND_BUCKET" ]; then
            echo "Error: Could not retrieve frontend bucket name from CloudFormation stack"
            echo "Please check your serverless.yml outputs section"
            exit 1
          fi

          echo "Deploying to S3 bucket: $FRONTEND_BUCKET"
          aws s3 sync build/web s3://$FRONTEND_BUCKET/ --delete

          # Get and display the website URL
          WEBSITE_URL=$(aws cloudformation describe-stacks \
            --stack-name restaurant-menu-optimizer-dev \
            --region us-east-1 \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendWebsiteURL`].OutputValue' \
            --output text)

          echo "ðŸš€ Frontend deployed successfully!"
          echo "ðŸ“± Your website is available at: $WEBSITE_URL"
        working-directory: ./frontend
