service: restaurant-menu-optimizer
useDotenv: true

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'local'}
  region: us-east-1
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    LLM_PROVIDER: ${env:LLM_PROVIDER, 'anthropic'}
    LLM_MODEL: ${env:LLM_MODEL, 'claude-3-5-sonnet-20241022'}
    USER_POOL_ID: ${self:custom.userPoolId}
    CLIENT_ID: ${self:custom.clientId}
    MENU_FILES_BUCKET: ${self:custom.menuFilesBucket}
    QLOO_API_KEY: ${env.QLOO_API_KEY, ''}
  apiGateway:
    shouldStartNameWithService: true
    apiKeys: []
    binaryMediaTypes:
      - "multipart/form-data"

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-s3-local

custom:
  userPoolId: ${param:userPoolId, env:USER_POOL_ID, 'dev-user-pool'}
  clientId: ${param:clientId, env:CLIENT_ID, 'local-client-id'}
  menuFilesBucket: ${param:menuFilesBucket, env:MENU_FILES_BUCKET, 'local-menu-files-bucket'}
  authorizer:
    name: cognitoAuthorizer
    type: COGNITO_USER_POOLS
    arn:
      Fn::GetAtt: [userpool, Arn]
  dotenv:
    basePath: ${self:custom.basePath, './'}
    logging: true
    include:
      - LLM_PROVIDER
      - LLM_MODEL
      - LLM_API_KEY
      - CLIENT_ID
      - USER_POOL_ID
      - MENU_FILES_BUCKET
      - QLOO_API_KEY
  webpack:
    webpackConfig: ./config/webpack.config.js
    includeModules: true
    packager: "npm"
  serverless-offline:
    httpPort: 3000
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    installPath: ./dynamodb_local
    noStart: false
    install: false
    tables:
      - TableName: ${self:provider.stage}-restaurants
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: restaurantId
            AttributeType: S
        KeySchema:
          - AttributeName: restaurantId
            KeyType: HASH
      - TableName: ${self:provider.stage}-menu-items
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: restaurantId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: restaurantId-index
            KeySchema:
              - AttributeName: restaurantId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
      - TableName: restaurant-menu-files-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: fileId
            AttributeType: S
        KeySchema:
          - AttributeName: fileId
            KeyType: HASH
      - TableName: ${self:provider.stage}-similar-restaurant-data
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: restaurantId
            AttributeType: S
          - AttributeName: qlooEntityId
            AttributeType: S
        KeySchema:
          - AttributeName: restaurantId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: qlooEntityId-index
            KeySchema:
              - AttributeName: qlooEntityId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
      - TableName: ${self:provider.stage}-demographics-data
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: restaurantId
            AttributeType: S
          - AttributeName: qlooEntityId
            AttributeType: S
        KeySchema:
          - AttributeName: restaurantId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: qlooEntityId-index
            KeySchema:
              - AttributeName: qlooEntityId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
      - TableName: ${self:provider.stage}-optimized-menu-items
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: restaurantId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: restaurantId-index
            KeySchema:
              - AttributeName: restaurantId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
      - TableName: ${self:provider.stage}-suggestions
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: suggestionId
            AttributeType: S
          - AttributeName: restaurantId
            AttributeType: S
        KeySchema:
          - AttributeName: suggestionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: restaurantId-index
            KeySchema:
              - AttributeName: restaurantId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
      - TableName: ${self:provider.stage}-taste-profile-visualizations
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: visualizationId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: restaurantId
            AttributeType: S
        KeySchema:
          - AttributeName: visualizationId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: itemId-index
            KeySchema:
              - AttributeName: itemId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: restaurantId-index
            KeySchema:
              - AttributeName: restaurantId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
      - TableName: ${self:provider.stage}-taste-profile-comparisons
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: comparisonId
            AttributeType: S
          - AttributeName: item1Id
            AttributeType: S
          - AttributeName: restaurantId
            AttributeType: S
        KeySchema:
          - AttributeName: comparisonId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: item-pair-index
            KeySchema:
              - AttributeName: item1Id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: restaurantId-index
            KeySchema:
              - AttributeName: restaurantId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
      - TableName: ${self:provider.stage}-analytics
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: analyticsId
            AttributeType: S
          - AttributeName: restaurantId
            AttributeType: S
        KeySchema:
          - AttributeName: analyticsId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: restaurantId-index
            KeySchema:
              - AttributeName: restaurantId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
  s3:
    port: 4569
    directory: /tmp
    buckets:
      - name: ${self:custom.menuFilesBucket}

functions:
  PreSignUp:
    handler: src/auth/triggers/pre-signup.handler
    events:
      - cognitoUserPool:
          pool: UserPool
          trigger: PreSignUp
    environment:
      USER_POOL_ID: ${self:provider.environment.USER_POOL_ID}
      CLIENT_ID: ${self:provider.environment.CLIENT_ID}

  PostConfirmation:
    handler: src/auth/triggers/post-confirmation.handler
    events:
      - cognitoUserPool:
          pool: UserPool
          trigger: PostConfirmation
    environment:
      USER_POOL_ID: ${self:provider.environment.USER_POOL_ID}
      CLIENT_ID: ${self:provider.environment.CLIENT_ID}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: "*" # Use '*' for local, override with real ARN in AWS

  RegisterUser:
    handler: src/auth/handlers/register-user.handler
    events:
      - http:
          path: auth/register-user
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - email
                    - password
                  properties:
                    email:
                      type: string
                      format: email
                    password:
                      type: string
                      minLength: 8
    environment:
      USER_POOL_ID: ${self:provider.environment.USER_POOL_ID}
      CLIENT_ID: ${self:provider.environment.CLIENT_ID}
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:SignUp
        Resource: "*"

  RegisterRestaurant:
    handler: src/auth/handlers/register-restaurant.handler
    events:
      - http:
          path: auth/register
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - email
                    - password
                  properties:
                    email:
                      type: string
                      format: email
                    password:
                      type: string
                      minLength: 8
    environment:
      USER_POOL_ID: ${self:provider.environment.USER_POOL_ID}
      CLIENT_ID: ${self:provider.environment.CLIENT_ID}
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:SignUp
          - cognito-idp:AdminConfirmSignUp
          - cognito-idp:InitiateAuth
          - cognito-idp:GetUser
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: "*"

  Login:
    handler: src/auth/handlers/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - email
                    - password
                  properties:
                    email:
                      type: string
                      format: email
                    password:
                      type: string
    environment:
      USER_POOL_ID: ${self:provider.environment.USER_POOL_ID}
      CLIENT_ID: ${self:provider.environment.CLIENT_ID}
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:InitiateAuth
          - cognito-idp:GetUser
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: "*"

  ConfirmRegistration:
    handler: src/auth/handlers/confirm-registration.handler
    events:
      - http:
          path: auth/confirm-registration
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - email
                    - confirmationCode
                  properties:
                    email:
                      type: string
                      format: email
                    confirmationCode:
                      type: string
    environment:
      USER_POOL_ID: ${self:provider.environment.USER_POOL_ID}
      CLIENT_ID: ${self:provider.environment.CLIENT_ID}
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:ConfirmSignUp
        Resource: "*"

  RefreshToken:
    handler: src/auth/handlers/refresh-token.handler
    events:
      - http:
          path: auth/refresh-token
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - refreshToken
                  properties:
                    refreshToken:
                      type: string
    environment:
      USER_POOL_ID: ${self:provider.environment.USER_POOL_ID}
      CLIENT_ID: ${self:provider.environment.CLIENT_ID}
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:InitiateAuth
          - cognito-idp:GetUser
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: "*"

  UploadMenu:
    handler: src/menu/handlers/upload-menu.handler
    events:
      - http:
          path: menu/upload
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - restaurantId
                    - fileName
                    - fileType
                    - fileSize
                  properties:
                    restaurantId:
                      type: string
                    fileName:
                      type: string
                    fileType:
                      type: string
                    fileSize:
                      type: number
          authorizer: ${self:custom.authorizer}
    environment:
      MENU_FILES_BUCKET: ${self:provider.environment.MENU_FILES_BUCKET}
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: "*"

  ParseMenu:
    handler: src/menu/handlers/parse-menu.handler
    events:
      - http:
          path: menu/parse
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - restaurantId
                    - fileKey
                    - fileType
                  properties:
                    restaurantId:
                      type: string
                    fileKey:
                      type: string
                    fileType:
                      type: string
                    fileId:
                      type: string
          authorizer: ${self:custom.authorizer}
    environment:
      MENU_FILES_BUCKET: ${self:provider.environment.MENU_FILES_BUCKET}
      STAGE: ${self:provider.stage}
      LLM_PROVIDER: ${self:provider.environment.LLM_PROVIDER}
      LLM_MODEL: ${self:provider.environment.LLM_MODEL}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: "*"
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:BatchWriteItem
        Resource: "*"
      - Effect: Allow
        Action:
          - textract:DetectDocumentText
          - textract:StartDocumentTextDetection
          - textract:GetDocumentTextDetection
        Resource: "*"
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource: "*"

  EnhanceMenuDescriptions:
    handler: src/menu/handlers/enhance-menu-descriptions.handler
    events:
      - http:
          path: menu/enhance-descriptions
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  properties:
                    itemId:
                      type: string
                    restaurantId:
                      type: string
                    category:
                      type: string
                    targetAudience:
                      type: string
                    enhancementStyle:
                      type: string
                    batchSize:
                      type: number
                    llmProvider:
                      type: string
                  oneOf:
                    - required: ["itemId"]
                    - required: ["restaurantId"]
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
      LLM_PROVIDER: ${self:provider.environment.LLM_PROVIDER}
      LLM_MODEL: ${self:provider.environment.LLM_MODEL}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: "*"
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource: "*"

  SetupRestaurantProfile:
    handler: src/restaurant/handlers/setup-restaurant-profile.handler
    events:
      - http:
          path: restaurant/profile
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - name
                    - city
                    - state
                  properties:
                    name:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
          authorizer: ${self:custom.authorizer}
      - http:
          path: restaurant/profile
          method: options
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Scan
        Resource: "*"

  SearchQlooRestaurants:
    handler: src/restaurant/handlers/search-qloo-restaurants.handler
    events:
      - http:
          path: restaurant/search-qloo
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - restaurantName
                    - city
                    - state
                  properties:
                    restaurantName:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
          authorizer: ${self:custom.authorizer}
      - http:
          path: restaurant/search-qloo
          method: options
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
      QLOO_API_URL: ${env:QLOO_API_URL, 'https://hackathon.api.qloo.com'}
      QLOO_API_KEY: ${self:provider.environment.QLOO_API_KEY}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource: "*"

  SelectRestaurant:
    handler: src/restaurant/handlers/select-restaurant.handler
    events:
      - http:
          path: restaurant/select
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - restaurantId
                    - qlooSearchResult
                  properties:
                    restaurantId:
                      type: string
                    qlooSearchResult:
                      type: object
                    qlooEntityId:
                      type: string
                    address:
                      type: string
                    priceLevel:
                      type: number
                    genreTags:
                      type: array
                      items:
                        type: string
          authorizer: ${self:custom.authorizer}
      - http:
          path: restaurant/select
          method: options
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: "*"

  SearchSimilarRestaurants:
    handler: src/restaurant/handlers/search-similar-restaurants.handler
    events:
      - http:
          path: restaurant/{restaurantId}/similar-restaurants
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            parameters:
              paths:
                restaurantId: true
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - entityId
                  properties:
                    entityId:
                      type: string
                    minRating:
                      type: number
                      minimum: 1
                      maximum: 5
          authorizer: ${self:custom.authorizer}
      - http:
          path: restaurant/{restaurantId}/similar-restaurants
          method: options
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
      QLOO_API_URL: ${env:QLOO_API_URL, 'https://hackathon.api.qloo.com'}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: "*"
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource: "*"

  GetDemographics:
    handler: src/restaurant/handlers/get-demographics.handler
    events:
      - http:
          path: restaurant/{restaurantId}/demographics
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            parameters:
              paths:
                restaurantId: true
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - entityId
                  properties:
                    entityId:
                      type: string
          authorizer: ${self:custom.authorizer}
      - http:
          path: restaurant/{restaurantId}/demographics
          method: options
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
      QLOO_API_URL: ${env:QLOO_API_URL, 'https://hackathon.api.qloo.com'}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: "*"
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource: "*"

  GetRestaurant:
    handler: src/restaurant/handlers/get-restaurant.handler
    events:
      - http:
          path: restaurant/{restaurantId}
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            parameters:
              paths:
                restaurantId: true
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: "*"

  GetCurrentRestaurant:
    handler: src/restaurant/handlers/get-current-restaurant.handler
    events:
      - http:
          path: restaurant/get
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
      - http:
          path: restaurant/get
          method: options
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
    environment:
      STAGE: ${self:provider.stage}
      USER_POOL_ID: ${self:provider.environment.USER_POOL_ID}
      CLIENT_ID: ${self:provider.environment.CLIENT_ID}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - cognito-idp:GetUser
        Resource: "*"

  OptimizationOptions:
    handler: src/menu/handlers/optimization-options.handler
    events:
      - http:
          path: menu/optimization-options
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            parameters:
              querystrings:
                restaurantId: true
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: "*"

  OptimizeExistingItems:
    handler: src/menu/handlers/optimize-existing-items.handler
    events:
      - http:
          path: menu/optimize-existing-items
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - restaurantId
                  properties:
                    restaurantId:
                      type: string
                    itemIds:
                      type: array
                      items:
                        type: string
                    optimizationStyle:
                      type: string
                      enum: ["casual", "upscale", "trendy", "traditional"]
                    targetAudience:
                      type: string
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
      LLM_PROVIDER: ${self:provider.environment.LLM_PROVIDER}
      LLM_MODEL: ${self:provider.environment.LLM_MODEL}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: "*"
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource: "*"

  SuggestNewItems:
    handler: src/menu/handlers/suggest-new-items.handler
    events:
      - http:
          path: menu/suggest-new-items
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - restaurantId
                  properties:
                    restaurantId:
                      type: string
                    maxSuggestions:
                      type: number
                      minimum: 1
                      maximum: 10
                    cuisineStyle:
                      type: string
                    priceRange:
                      type: string
                      enum: ["budget", "moderate", "upscale", "luxury"]
                    excludeCategories:
                      type: array
                      items:
                        type: string
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
      LLM_PROVIDER: ${self:provider.environment.LLM_PROVIDER}
      LLM_MODEL: ${self:provider.environment.LLM_MODEL}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:BatchWriteItem
        Resource: "*"
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource: "*"

  ReviewOptimizations:
    handler: src/menu/handlers/review-optimizations.handler
    events:
      - http:
          path: menu/review-optimizations
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            parameters:
              querystrings:
                restaurantId: true
                type: true
          authorizer: ${self:custom.authorizer}
      - http:
          path: menu/review-optimizations
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - restaurantId
                    - type
                    - itemId
                    - status
                  properties:
                    restaurantId:
                      type: string
                    type:
                      type: string
                      enum: ["existing_items", "new_items"]
                    itemId:
                      type: string
                    status:
                      type: string
                      enum: ["approved", "rejected"]
                    feedback:
                      type: string
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: "*"

  AnalyzeTasteProfile:
    handler: src/menu/handlers/analyze-taste-profile.handler
    events:
      - http:
          path: menu/analyze-taste-profile
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  properties:
                    itemId:
                      type: string
                    restaurantId:
                      type: string
                    includeIngredients:
                      type: boolean
                    includeDietaryTags:
                      type: boolean
                    batchSize:
                      type: number
                      minimum: 1
                      maximum: 25
                  oneOf:
                    - required: ["itemId"]
                    - required: ["restaurantId"]
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
      QLOO_API_URL: ${env:QLOO_API_URL, 'https://hackathon.api.qloo.com'}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: "*"
      - Effect: Allow
        Action:
          - ssm:GetParameter
        Resource: "*"

  CompareTasteProfiles:
    handler: src/menu/handlers/compare-taste-profiles.handler
    events:
      - http:
          path: menu/compare-taste-profiles
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            schemas:
              application/json:
                schema:
                  type: object
                  required:
                    - item1Id
                    - item2Id
                  properties:
                    item1Id:
                      type: string
                    item2Id:
                      type: string
                    restaurantId:
                      type: string
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:PutItem
        Resource: "*"

  ScheduledAnalyticsUpdate:
    handler: src/analytics/handlers/scheduled-analytics-update.handler
    events:
      - schedule:
          rate: rate(1 hour)
          enabled: true
          description: "Update analytics data for all restaurants every hour"
    environment:
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: "*"

  GetDashboardData:
    handler: src/analytics/handlers/get-dashboard-data.handler
    events:
      - http:
          path: analytics/dashboard
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            parameters:
              querystrings:
                restaurantId: true
                timeframe: false
                page: false
                limit: false
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: "*"

  GetMenuItems:
    handler: src/menu/handlers/get-menu-items.handler
    events:
      - http:
          path: menu/items
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            parameters:
              querystrings:
                restaurantId: true
                category: false
                page: false
                limit: false
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: "*"

  GetMenuItem:
    handler: src/menu/handlers/get-menu-item.handler
    events:
      - http:
          path: menu/items/{itemId}
          method: get
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            parameters:
              paths:
                itemId: true
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: "*"

  UpdateMenuItem:
    handler: src/menu/handlers/update-menu-item.handler
    events:
      - http:
          path: menu/items/{itemId}
          method: put
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            parameters:
              paths:
                itemId: true
            schemas:
              application/json:
                schema:
                  type: object
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                    price:
                      type: number
                    category:
                      type: string
                    ingredients:
                      type: array
                      items:
                        type: string
                    dietaryTags:
                      type: array
                      items:
                        type: string
                    allergens:
                      type: array
                      items:
                        type: string
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: "*"

  DeleteMenuItem:
    handler: src/menu/handlers/delete-menu-item.handler
    events:
      - http:
          path: menu/items/{itemId}
          method: delete
          cors:
            origin: "*"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          request:
            parameters:
              paths:
                itemId: true
          authorizer: ${self:custom.authorizer}
    environment:
      STAGE: ${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: "*"

resources:
  Resources:
    userpool:
      Type: AWS::Cognito::UserPool
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
        EmailConfiguration:
          EmailSendingAccount: COGNITO_DEFAULT
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
    userpoolclient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: userpool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_CUSTOM_AUTH
          - ALLOW_USER_SRP_AUTH
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
    restaurantstable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-restaurants
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: restaurantId
            AttributeType: S
        KeySchema:
          - AttributeName: restaurantId
            KeyType: HASH
    menufilesbucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: menufiles-${self:provider.stage}
    frontendwebsitebucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: menu-optimizer-frontend-${self:provider.stage}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
    frontendwebsitebucketpolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: frontendwebsitebucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: frontendwebsitebucket
                    - "/*"
    menufilestable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: restaurant-menu-files-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: fileId
            AttributeType: S
        KeySchema:
          - AttributeName: fileId
            KeyType: HASH
    menuitemstable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-menu-items
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: restaurantId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: restaurantId-index
            KeySchema:
              - AttributeName: restaurantId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    similarrestaurantdatatable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-similar-restaurant-data
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: restaurantId
            AttributeType: S
          - AttributeName: qlooEntityId
            AttributeType: S
        KeySchema:
          - AttributeName: restaurantId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: qlooEntityId-index
            KeySchema:
              - AttributeName: qlooEntityId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    demographicsdatatable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-demographics-data
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: restaurantId
            AttributeType: S
          - AttributeName: qlooEntityId
            AttributeType: S
        KeySchema:
          - AttributeName: restaurantId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: qlooEntityId-index
            KeySchema:
              - AttributeName: qlooEntityId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    optimizedmenuitemstable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-optimized-menu-items
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: restaurantId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: restaurantId-index
            KeySchema:
              - AttributeName: restaurantId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    analyticstable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-analytics
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: analyticsId
            AttributeType: S
          - AttributeName: restaurantId
            AttributeType: S
        KeySchema:
          - AttributeName: analyticsId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: restaurantId-index
            KeySchema:
              - AttributeName: restaurantId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
  Outputs:
    UserPoolId:
      Value:
        Ref: userpool
      Description: "ID of the Cognito User Pool"
    UserPoolClientId:
      Value:
        Ref: userpoolclient
      Description: "ID of the Cognito User Pool Client"
    MenuFilesBucketName:
      Value:
        Ref: menufilesbucket
      Description: "Name of the S3 bucket for menu files"
    FrontendBucketName:
      Value:
        Ref: frontendwebsitebucket
      Description: "Name of the S3 bucket for frontend website"
    FrontendWebsiteURL:
      Value:
        Fn::GetAtt:
          - frontendwebsitebucket
          - WebsiteURL
      Description: "URL of the frontend website"
